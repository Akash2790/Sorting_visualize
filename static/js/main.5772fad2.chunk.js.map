{"version":3,"sources":["components/Navbar.js","components/Bars.js","algorithms/BubbleSort.js","algorithms/SelectionSort.js","algorithms/InsertionSort.js","algorithms/MergeSort.js","algorithms/QuickSort.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","handleLength","handleSpeed","handleAlgo","generateRandomArray","handleSort","sorting","completed","len","speed","algo","className","onClick","window","location","type","onChange","min","max","value","Math","ceil","disabled","step","ListBlocks","blocks","compare","sorted","swap","useState","innerWidth","length","width","setWidth","color","useEffect","addEventListener","map","block","i","height","bg","includes","style","backgroundColor","arr","j","temp","bubbleSort","dupBlocks","slice","order","push","selectionSort","insertionSort","mergeSortHelper","l","r","mid","floor","merge","mergeSort","quickSortHelper","pivot","random","m","partition","quickSort","App","setCompleted","setSorting","setSortedIndex","randomArray","Array","from","keys","randomIndex","setBlocks","setAlgo","setLength","setSpeed","setCompare","setSwap","sortedIndex","event","Number","target","sortAccOrder","loop","setTimeout","k","index","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5772fad2.chunk.js","sourcesContent":["import React from 'react'\nimport './Navbar.css'\n\nconst Navbar = ({\n  handleLength,\n  handleSpeed,\n  handleAlgo,\n  generateRandomArray,\n  handleSort,\n  sorting,\n  completed,\n  len,\n  speed,\n  algo,\n}) => {\n  return (\n    <nav>\n      <div\n        className='nav-brand'\n        onClick={() =>\n          (window.location =\n            'https://github.com/jyoti369/sorting_visualizer')\n        }\n      >\n        Sorting Visualizer\n      </div>\n\n      <div className='toolbox'>\n        <div>\n          <div className='group speed'>\n            <label>Speed</label>\n            <input\n              type='range'\n              onChange={handleSpeed}\n              min='1'\n              max='10'\n              value={Math.ceil(400 / speed)}\n              disabled={sorting}\n            ></input>\n          </div>\n\n          <div className='group length'>\n            <label>Length</label>\n            <input\n              type='range'\n              onChange={handleLength}\n              min='5'\n              max={100}\n              step='1'\n              disabled={sorting}\n              value={len}\n            ></input>\n          </div>\n\n          <select onChange={handleAlgo} disabled={sorting} value={algo}>\n            <option value='bubbleSort'>Bubble Sort</option>\n            <option value='selectionSort'>Selection Sort</option>\n            <option value='insertionSort'>Insertion Sort</option>\n            <option value='mergeSort'>Merge Sort</option>\n            <option value='quickSort'>Quick Sort</option>\n          </select>\n        </div>\n\n        <div>\n          <button onClick={generateRandomArray} disabled={sorting}>\n            New Array\n          </button>\n          <button onClick={handleSort} disabled={sorting || completed}>\n            Sort\n          </button>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar\n","import React, { useState, useEffect } from 'react'\nimport './Bars.css'\n\nfunction ListBlocks({ blocks, compare, sorted, swap }) {\n  const [width, setWidth] = useState(\n    Math.min(20, Math.ceil(window.innerWidth / blocks.length) - 5)\n  )\n  const color = blocks.length <= 50 && width > 14 ? 'black' : 'transparent'\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWidth(Math.min(20, Math.ceil(window.innerWidth / blocks.length) - 8))\n    }\n\n    window.addEventListener('resize', handleResize)\n\n    setWidth(Math.min(20, Math.ceil(window.innerWidth / blocks.length) - 8))\n  }, [blocks.length])\n\n  return (\n    <div className='listBlocks'>\n      {blocks.map((block, i) => {\n        const height = (block * 500) / blocks.length\n        let bg = 'turquoise'\n\n        // i th element is being compared with the other element\n        if (compare && (i === compare[0] || i === compare[1])) {\n          bg = '#ffff50'\n        }\n\n        if (swap && (i === swap[0] || i === swap[1])) {\n          bg = 'red'\n        }\n        // i th element is in sorted position\n        if (sorted && sorted.includes(i)) {\n          bg = '#4bc52e'\n        }\n\n        const style = {\n          backgroundColor: bg,\n          color: color,\n          height: height,\n          width: width,\n        }\n        return (\n          <div key={i} className='block' style={style}>\n            {block}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default ListBlocks\n","const swap = (arr, i, j) => {\n    const temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n  }\n  \n  const bubbleSort = (blocks) => {\n    const dupBlocks = blocks.slice() // copying blocks array\n    const order = []\n  \n    let i, j\n  \n    for (i = 0; i < dupBlocks.length; i++) {\n      for (j = 0; j < dupBlocks.length - i - 1; j++) {\n        order.push([j, j + 1, null, null]) // Compare\n        if (dupBlocks[j] > dupBlocks[j + 1]) {\n          swap(dupBlocks, j, j + 1)\n          order.push([j, j + 1, dupBlocks.slice(), null]) // Swap\n        }\n      }\n      order.push([null, null, null, j]) // j-th element is in correct position ( Sorted )\n    }\n  \n    return order\n  }\n  \n  export default bubbleSort\n  ","const swap = (arr, i, j) => {\n    const temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n  }\n  \n  const selectionSort = (blocks) => {\n    const dupBlocks = blocks.slice() // copying blocks array\n    const order = []\n  \n    let i, j\n  \n    for (i = 0; i < dupBlocks.length; i++) {\n      for (j = i + 1; j < dupBlocks.length; j++) {\n        order.push([i, j, null, null]) // Compare\n        if (dupBlocks[i] > dupBlocks[j]) {\n          swap(dupBlocks, i, j)\n          order.push([i, j, dupBlocks.slice(), null]) // Swap\n        }\n      }\n      order.push([null, null, null, i]) // i-th element is in correct position ( Sorted )\n    }\n  \n    return order\n  }\n  \n  export default selectionSort\n  ","const swap = (arr, i, j) => {\n    const temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n  }\n  \n  const insertionSort = (blocks) => {\n    const dupBlocks = blocks.slice() // copying blocks array\n    const order = []\n  \n    let i, j\n  \n    for (i = 0; i < dupBlocks.length; i++) {\n      j = i - 1\n      while (j >= 0 && dupBlocks[j] > dupBlocks[j + 1]) {\n        swap(dupBlocks, j, j + 1)\n        order.push([j, j + 1, null, null]) // Compare\n        order.push([j, j + 1, dupBlocks.slice(), null]) // Swap\n        j -= 1\n      }\n    }\n  \n    for (i = 0; i < dupBlocks.length; i++) {\n      order.push([null, null, null, i])\n    }\n  \n    return order\n  }\n  \n  export default insertionSort\n  ","let order = []\n\nconst merge = (dupBlocks, l, mid, r) => {\n  let i = l,\n    j = mid + 1\n\n  const arr = []\n\n  while (i <= mid && j <= r) {\n    order.push([i, j, null, null]) // Compare i th and j th element\n    if (dupBlocks[i] <= dupBlocks[j]) {\n      arr.push(dupBlocks[i++])\n    } else {\n      arr.push(dupBlocks[j++])\n    }\n  }\n\n  while (i <= mid) {\n    order.push([i, null, null, null])\n    arr.push(dupBlocks[i++])\n  }\n\n  while (j <= r) {\n    order.push([null, j, null, null])\n    arr.push(dupBlocks[j++])\n  }\n\n  for (i = l; i <= r; i++) {\n    dupBlocks[i] = arr[i - l]\n    order.push([i, null, dupBlocks.slice(), null])\n  }\n}\n\nconst mergeSortHelper = (dupBlocks, l, r) => {\n  if (l >= r) return\n\n  const mid = Math.floor((l + r) / 2)\n\n  mergeSortHelper(dupBlocks, l, mid)\n  mergeSortHelper(dupBlocks, mid + 1, r)\n\n  merge(dupBlocks, l, mid, r)\n}\n\nconst mergeSort = (blocks) => {\n  order = []\n  const dupBlocks = blocks.slice() // copying blocks array\n\n  mergeSortHelper(dupBlocks, 0, dupBlocks.length - 1)\n\n  for (let i = 0; i < dupBlocks.length; i++) {\n    order.push([null, null, null, i]) // i th element will be in correct position\n  }\n\n  return order\n}\n\nexport default mergeSort\n","let order = [];\n\nconst swap = (arr, i, j) => {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n};\n\nconst partition = (dupBlocks, l, r) => {\n  const pivot = l;\n  let j = l;\n\n  for (let i = l + 1; i <= r; i++) {\n    order.push([i, pivot, null, null]);\n    if (dupBlocks[i] < dupBlocks[pivot]) {\n      j += 1;\n      swap(dupBlocks, i, j);\n      order.push([i, j, dupBlocks.slice(), null]);\n    }\n  }\n\n  swap(dupBlocks, pivot, j);\n  order.push([pivot, j, dupBlocks.slice(), null]);\n  order.push([null, null, null, j]);\n  return j;\n};\n\nconst quickSortHelper = (dupBlocks, l, r) => {\n  if (l >= r) {\n    if (l === r) order.push([null, null, null, l]);\n    return;\n  }\n\n  const pivot = l + Math.floor(Math.random() * (r - l));\n\n  swap(dupBlocks, l, pivot);\n  order.push([l, pivot, dupBlocks.slice(), null]);\n\n  const m = partition(dupBlocks, l, r);\n\n  quickSortHelper(dupBlocks, l, m - 1);\n  quickSortHelper(dupBlocks, m + 1, r);\n\n  return;\n};\n\nconst quickSort = (blocks) => {\n  const dupBlocks = blocks.slice(); // Copying blocks array\n  order = [];\n\n  quickSortHelper(dupBlocks, 0, dupBlocks.length - 1);\n\n  return order;\n};\n\nexport default quickSort;\n","import React, { useState, useEffect } from 'react'\n\nimport Navbar from './components/Navbar'\nimport Bars from './components/Bars'\n\nimport bubbleSort from './algorithms/BubbleSort'\nimport selectionSort from './algorithms/SelectionSort'\nimport insertionSort from './algorithms/InsertionSort'\nimport mergeSort from './algorithms/MergeSort'\nimport quickSort from './algorithms/QuickSort'\n\nfunction App() {\n  // Generating shuffled array of 1 to n\n  const generateRandomArray = (len) => {\n    setCompleted(false)\n    setSorting(false)\n    setSortedIndex([])\n\n    const randomArray = Array.from(Array(len + 1).keys()).slice(1)\n\n    for (let i = randomArray.length - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i - 1))\n      const temp = randomArray[i]\n\n      randomArray[i] = randomArray[randomIndex]\n      randomArray[randomIndex] = temp\n    }\n\n    setBlocks(randomArray)\n  }\n\n  // States\n  const [algo, setAlgo] = useState('bubbleSort')\n  const [len, setLength] = useState(30)\n  const [blocks, setBlocks] = useState([])\n  const [sorting, setSorting] = useState(false)\n  const [completed, setCompleted] = useState(true)\n  const [speed, setSpeed] = useState(250)\n  const [compare, setCompare] = useState([])\n  const [swap, setSwap] = useState([])\n  const [sortedIndex, setSortedIndex] = useState([])\n\n  // Generating random array every time the length is changed by th user\n  useEffect(() => {\n    generateRandomArray(len)\n  }, [len, algo])\n\n  // setting the selected algorithm\n  const handleAlgo = (event) => {\n    setAlgo(event.target.value)\n  }\n\n  // handling the length of the array\n  const handleLength = (event) => {\n    setLength(Number(event.target.value))\n  }\n\n  // handling the speed of sorting\n  const handleSpeed = (event) => {\n    setSpeed(Math.ceil(400 / Number(event.target.value)))\n  }\n\n  // Sorting according to the algorithm\n  const handleSort = () => {\n    const sortAccOrder = (order) => {\n      ;(function loop(i) {\n        setTimeout(function () {\n          const [j, k, arr, index] = order[i]\n          setCompare([j, k])\n          setSwap([])\n\n          if (index !== null) {\n            setSortedIndex((prevState) => [...prevState, index])\n          }\n\n          if (arr) {\n            setBlocks(arr)\n            if (j !== null || k != null) setSwap([j, k])\n          }\n\n          if (++i < order.length) {\n            loop(i)\n          } else {\n            setSorting(false)\n            setCompleted(true)\n          }\n        }, speed)\n      })(0)\n    }\n\n    setSorting(true)\n\n    algo === 'bubbleSort'\n      ? sortAccOrder(bubbleSort(blocks))\n      : algo === 'selectionSort'\n      ? sortAccOrder(insertionSort(blocks))\n      : algo === 'insertionSort'\n      ? sortAccOrder(selectionSort(blocks))\n      : algo === 'mergeSort'\n      ? sortAccOrder(mergeSort(blocks))\n      : algo === 'quickSort'\n      ? sortAccOrder(quickSort(blocks))\n      : (() => {\n          setSorting(false)\n          setCompleted(true)\n        })()\n  }\n\n  return (\n    <div className='App'>\n      <Navbar\n        generateRandomArray={() => generateRandomArray(len)}\n        handleLength={handleLength}\n        handleSpeed={handleSpeed}\n        handleAlgo={handleAlgo}\n        handleSort={handleSort}\n        sorting={sorting}\n        completed={completed}\n        len={len}\n        speed={speed}\n        algo={algo}\n      />\n\n      <Bars\n        blocks={blocks}\n        compare={sorting && compare}\n        swap={sorting && swap}\n        sorted={sortedIndex}\n      />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}